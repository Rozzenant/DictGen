import os
import django

# Инициализация Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dictgen.settings')
django.setup()

from main.models import Task, Attempt, User
from main.utils import analyze_errors

def create_test_data():
    # Создаем тестового пользователя
    user = User.objects.create(
        username='test_user',
        email='test@example.com',
        login='test',
        password='test123',
        first_name='Test',
        last_name='User',
        role='student'
    )

    # Примеры заданий и попыток
    test_cases = [
        {
            'title': 'Научный текст',
            'task': 'Квантовая механика описывает поведение материи на атомном и субатомном уровнях. Основные принципы включают принцип неопределенности Гейзенберга и принцип дополнительности Бора. Эти концепции противоречат классической физике.',
            'attempt': 'Квантовая механика описывает поведение материи на атомном и субатомном уровнях. Основные принципы включают принцип неопределенности Гейзенберга и принцип дополнительности Бора. Эти концепции противоречат классической физике'
        },
        {
            'title': 'Художественный текст',
            'task': 'Осенний лес был полон красок. Золотые листья кружились в воздухе, создавая причудливые узоры. Вдалеке слышался шум ручья, а птицы пели свои прощальные песни.',
            'attempt': 'Осенний лес был полон красок золотые листья кружились в воздухе создавая причудливые узоры вдалеке слышался шум ручья а птицы пели свои прощальные песни'
        },
        {
            'title': 'Текст с орфографическими ошибками',
            'task': 'В библиотеке можно найти множество интересных книг. Чтение развивает воображение и расширяет кругозор. Каждый день появляются новые произведения.',
            'attempt': 'В библеотеке можно найти множество интересных книг. Чтение развивает вооброжение и расширяет кругозор. Каждый день появляются новые произведения.'
        },
        {
            'title': 'Текст с лишними словами',
            'task': 'Солнце светило ярко. Дети играли во дворе. В воздухе пахло цветами.',
            'attempt': 'Солнце светило очень ярко. Дети играли весело во дворе. В воздухе пахло красивыми цветами.'
        },
        {
            'title': 'Текст с пропущенными словами',
            'task': 'Утром я проснулся рано. Сделал зарядку и принял душ. Позавтракал и пошел на работу.',
            'attempt': 'Утром проснулся рано. Сделал зарядку принял душ. Позавтракал пошел на работу.'
        },
        {
            'title': 'Текст со всеми типами ошибок',
            'task': 'Вчера я ходил в магазин. Купил хлеб, молоко и яблоки. Вечером приготовил ужин и посмотрел фильм.',
            'attempt': 'Вчера я ходил в магозин. Купил хлеб и яблоки. Вечером я очень вкусно приготовил ужин посмотрел интересный фильм.'
        }
    ]
    
    # Создаем задания и попытки
    for case in test_cases:
        # Создаем задание
        task = Task.objects.create(
            title=case['title'],
            content=case['task'],
            text_complexity='narrative',
            status='active',
            difficulty='medium',
            length=len(case['task']),
            min_words=10,
            max_words=100,
            min_sentences=1,
            max_sentences=10,
            user=user,
            teacher=user
        )
        
        # Создаем попытку
        attempt = Attempt.objects.create(
            task=task,
            content=case['attempt'],
            stage='submitted'
        )
        
        # Анализируем ошибки
        errors = analyze_errors(attempt)
        
        # Выводим результаты анализа
        print(f"\nАнализ попытки для задания '{case['title']}':")
        print(f"Текст задания: {case['task']}")
        print(f"Текст попытки: {case['attempt']}")
        print("Найденные ошибки:")
        for error in errors:
            print(f"- Тип ошибки: {error.error_type}")
            print(f"  Позиция: {error.position_start}-{error.position_end}")
            print(f"  Правильный вариант: {error.true_variant}")

if __name__ == "__main__":
    create_test_data()
