# Generated by Django 5.2.1 on 2025-05-11 20:25

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('grade', models.PositiveIntegerField(blank=True, help_text='Оценка по 100-балльной шкале (0-100)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('stage', models.CharField(choices=[('created', 'Создано'), ('in_progress', 'В процессе'), ('submitted', 'Отправлено на проверку'), ('review', 'На проверке'), ('completed', 'Завершено')], default='created', max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_attempts', models.IntegerField()),
                ('correct_attempts', models.IntegerField()),
                ('incorrect_attempts', models.IntegerField()),
                ('total_errors', models.IntegerField()),
                ('wer', models.FloatField()),
                ('cer', models.FloatField()),
                ('per', models.FloatField()),
                ('avg_errors_per_attempt', models.FloatField()),
                ('accuracy', models.FloatField()),
                ('last_error_date', models.DateTimeField()),
                ('word_errors', models.IntegerField()),
                ('punctuation_errors', models.IntegerField()),
                ('missing_word_errors', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=128)),
                ('length', models.IntegerField(editable=False)),
                ('subject', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=48, unique=True)),
                ('email', models.EmailField(max_length=48, unique=True)),
                ('first_name', models.CharField(max_length=48)),
                ('last_name', models.CharField(max_length=48)),
                ('role', models.CharField(choices=[('student', 'Ученик'), ('teacher', 'Преподаватель'), ('admin', 'Администратор')], default='student', max_length=16)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('password', models.CharField(max_length=128)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Error',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(choices=[('spelling', 'Орфографическая ошибка'), ('grammar', 'Грамматическая ошибка'), ('punctuation', 'Пунктуационная ошибка'), ('missing', 'Пропущенное слово'), ('extra', 'Лишнее слово')], max_length=24)),
                ('position_start', models.IntegerField()),
                ('position_end', models.IntegerField()),
                ('true_variant', models.TextField()),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.attempt')),
            ],
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('levenshtein', models.IntegerField()),
                ('wer', models.FloatField()),
                ('cer', models.FloatField()),
                ('per', models.FloatField()),
                ('accuracy', models.FloatField()),
                ('word_error_count', models.IntegerField(default=0)),
                ('punctuation_error_count', models.IntegerField(default=0)),
                ('missing_word_count', models.IntegerField(default=0)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='main.attempt')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128)),
                ('content', models.TextField()),
                ('text_complexity', models.CharField(choices=[('scientific', 'Научный'), ('narrative', 'Повествовательный'), ('colloquial', 'Разговорный'), ('technical', 'Технический'), ('artistic', 'Художественный')], default='narrative', max_length=32)),
                ('status', models.CharField(choices=[('draft', 'Черновик'), ('active', 'Активное'), ('in_review', 'На проверке'), ('reviewed', 'Проверено'), ('completed', 'Завершено')], default='draft', max_length=16)),
                ('difficulty', models.CharField(choices=[('easy', 'Легкий'), ('medium', 'Средний'), ('hard', 'Сложный')], default='medium', max_length=6)),
                ('length', models.IntegerField()),
                ('min_words', models.IntegerField()),
                ('max_words', models.IntegerField()),
                ('min_sentences', models.IntegerField()),
                ('max_sentences', models.IntegerField()),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=True)),
                ('assigned_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_tasks', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='attempt',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.task'),
        ),
        migrations.CreateModel(
            name='TaskTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.task')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.term')),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='terms',
            field=models.ManyToManyField(through='main.TaskTerm', to='main.term'),
        ),
    ]
